-- 1. 
CREATE OR REPLACE TRIGGER EMP_SAL_INS_DEL_TRIG 
AFTER INSERT OR DELETE  
ON EMPLOYEES 
FOR EACH ROW 
DECLARE 
	L_ID NUMBER;
	U_ID NUMBER; 
	UNAME VARCHAR2(100); 
BEGIN 
	SELECT MAX(LOG_ID) INTO L_ID FROM EMP_SAL_LOG; 
	IF L_ID IS NULL THEN 
		L_ID := 1;
	ELSE 
		L_ID := L_ID + 1;
	END IF;
	SELECT USER_ID, USERNAME INTO U_ID, UNAME FROM ALL_USERS WHERE USER_ID = USERENV('SCHEMAID');  
	CASE 
		WHEN INSERTING THEN 
			INSERT INTO EMP_SAL_LOG VALUES (L_ID,:NEW.EMPLOYEE_ID,NULL,:NEW.SALARY,SYSDATE,U_ID,UNAME,'APPROVED');
		WHEN DELETING THEN 
			INSERT INTO EMP_SAL_LOG VALUES (L_ID,:OLD.EMPLOYEE_ID,:OLD.SALARY,NULL,SYSDATE,U_ID,UNAME,'APPROVED');
	END CASE; 
END; 



-- 2. 
CREATE OR REPLACE TRIGGER EMP_SAL_UPDATE_TRIG 
BEFORE UPDATE 
OF SALARY 
ON EMPLOYEES 
FOR EACH ROW 
DECLARE 
	DENIAL EXCEPTION; 
	L_ID NUMBER;
	U_ID NUMBER; 
	UNAME VARCHAR2(100); 
BEGIN 
	SELECT MAX(LOG_ID) INTO L_ID FROM EMP_SAL_LOG;
	IF L_ID IS NULL THEN 
		L_ID := 1;
	ELSE 
		L_ID := L_ID + 1;
	END IF;
	SELECT USER_ID, USERNAME INTO U_ID, UNAME FROM ALL_USERS WHERE USER_ID = USERENV('SCHEMAID');  
	FOR R IN (SELECT MOD_DATE FROM EMP_SAL_LOG WHERE EMPLOYEE_ID = :OLD.EMPLOYEE_ID AND STATUS LIKE 'APPROVED') 
	LOOP 
		IF MONTHS_BETWEEN(SYSDATE,R.MOD_DATE) < 1 THEN  
			INSERT INTO EMP_SAL_LOG VALUES (L_ID,:OLD.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,SYSDATE,U_ID,UNAME,'DENIED'); 
			:NEW.SALARY := :OLD.SALARY; 
			RAISE DENIAL ; 
		END IF; 
	END LOOP; 
	IF ((:NEW.SALARY > 1.2 * :OLD.SALARY) OR (:NEW.SALARY < 0.8 * :OLD.SALARY)) THEN  
		INSERT INTO EMP_SAL_LOG VALUES (L_ID,:OLD.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,SYSDATE,U_ID,UNAME,'DENIED'); 
		:NEW.SALARY := :OLD.SALARY; 
		RAISE DENIAL ; 
	END IF; 
	INSERT INTO EMP_SAL_LOG VALUES (L_ID,:OLD.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,SYSDATE,U_ID,UNAME,'APPROVED'); 

	EXCEPTION  
		WHEN DENIAL THEN  
			DBMS_OUTPUT.PUT_LINE('SALARY UPDATE FAILED') ; 
		WHEN OTHERS THEN 
			DBMS_OUTPUT.PUT_LINE('UNKNOWN EXCEPTION') ; 
END; 










































